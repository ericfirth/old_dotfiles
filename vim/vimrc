""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                              "
"                    Eric Firth's VimRC                                        "
"                                                                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader = "\<Space>"

set nocompatible              " be iMproved, required
filetype off                  " required

packadd minpac
call minpac#init()

"colors
call minpac#add('morhetz/gruvbox')
call minpac#add('lifepillar/vim-solarized8')
call minpac#add('rakr/vim-one')

call minpac#add('ctrlpvim/ctrlp.vim')
call minpac#add('rking/ag.vim')
call minpac#add('vim-airline/vim-airline')
call minpac#add('vim-airline/vim-airline-themes')
call minpac#add('christoomey/vim-sort-motion')
call minpac#add('christoomey/vim-tmux-navigator')
call minpac#add('tpope/vim-surround')
call minpac#add('tpope/vim-dispatch')
call minpac#add('tpope/vim-unimpaired')
call minpac#add('tpope/vim-repeat')
call minpac#add('tpope/vim-fugitive')
call minpac#add('tpope/vim-sensible')
call minpac#add('tpope/vim-commentary')
call minpac#add('tpope/vim-abolish')
call minpac#add('tpope/vim-endwise')
call minpac#add('tpope/vim-speeddating')
call minpac#add('ap/vim-css-color')
call minpac#add('SirVer/ultisnips')
call minpac#add('skalnik/vim-vroom')
call minpac#add('w0rp/ale')
call minpac#add('prettier/vim-prettier')
call minpac#add('scrooloose/nerdtree')
call minpac#add('ludovicchabant/vim-gutentags')

call minpac#add('junegunn/vim-easy-align')
call minpac#add('ryanoasis/vim-devicons')

" " language based
call minpac#add('tpope/vim-rails')
call minpac#add('pangloss/vim-javascript')
call minpac#add('chemzqm/vim-jsx-improve')
call minpac#add('samuelsimoes/vim-jsx-utils')
call minpac#add('leshill/vim-json')
call minpac#add('aliou/sql-heredoc.vim')
call minpac#add('skammer/vim-ruby-complexity')
call minpac#add('k-takata/minpac', {'type':'opt'})

" minpac commands:
command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                          settings                                            "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" colorscheme solarized8_light
colorscheme gruvbox
set background=dark
set hidden
set cursorline
set path+=**
set wildmenu
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//


" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

" Use Silver Searcher instead of grep
set grepprg=ag
" Make CtrlP use ag for listing the files. Way faster and no useless files.
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_use_caching = 0

" highlight OverLength ctermbg=red ctermfg=white guibg=#592929
" match OverLength /\%81v.\+/

" Numbers
set number

" command to create directories on write
function! s:MkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
    if !isdirectory(dir)
      call mkdir(dir, 'p')
    endif
  endif
endfunction

augroup BWCCreateDir
  autocmd!
  autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

set mouse=a

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2
set shiftround
set expandtab

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

filetype indent on
filetype on
autocmd BufRead,BufNewFile *.json.jb set filetype=ruby

let g:rubycomplexity_enable_at_startup = 0

set noswapfile

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                          mappings                                            "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has('nvim')
  tnoremap <A-[> <Esc>
  tnoremap <a-h> <c-\><c-n><c-w>h
  tnoremap <a-j> <c-\><c-n><c-w>j
  tnoremap <a-k> <c-\><c-n><c-w>k
  tnoremap <a-l> <c-\><c-n><c-w>l
  nnoremap <a-h> <c-w>h
  nnoremap <a-j> <c-w>j
  nnoremap <a-k> <c-w>k
  nnoremap <a-l> <c-w>l
endif

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <leader>tt :call vroom#RunTestFile({'runner':'rspec'})<CR>
nnoremap <leader>TT :call vroom#RunNearestTest({'runner':'rspec'})<CR>
nnoremap <leader>t :call vroom#RunTestFile({'runner':'rails test'})<CR>
nnoremap <leader>T :call vroom#RunNearestTest({'runner':'rails test'})<CR>

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

nmap <leader>R :Dispatch chrome-cli reload<cr>
map <leader>i mmgg=G`m
map <leader>p :set paste<CR><esc>"*]p:set nopaste<cr>
nmap <leader>vr :tabedit ~/.vimrc<cr>
nmap <leader>tm :tabedit ~/.tmux.conf<cr>
nmap <leader>so :source $MYVIMRC<cr>
nmap <leader>gs :Gstatus<cr>
nmap <leader>s :w<cr>
nmap <leader>q :q<cr>
nmap <leader>S :w<cr>:Gwrite<cr>
nmap <leader>gp ci(props<esc>oconst <esc>pA = props;<esc>
noremap <leader>ja :call JSXEncloseReturn()<CR>
nnoremap <leader>ji :call JSXEachAttributeInLine()<CR>
nnoremap <leader>je :call JSXExtractPartialPrompt()<CR>
nnoremap <leader>jc :call JSXChangeTagPrompt()<CR>
nnoremap vat :call JSXSelectTag()<CR>
nmap 0 ^
nmap <cr> o<esc>k
nmap j gj
nmap k gk
map <C-n> :NERDTreeToggle<cr>

nnoremap <F1> :set hlsearch<cr>
nnoremap <F2> :set nohlsearch<cr>
nnoremap <F3> :set paste<cr>
nnoremap <F4> :set nopaste<cr>
nnoremap <f5> :let g:ale_fix_on_save = 0<cr>
nnoremap <f6> :let g:ale_fix_on_save = 1<cr>

nnoremap <leader>mc :Dispatch rails g migration 
nnoremap <leader>mm :Dispatch rails db:migrate<cr>
nnoremap <leader>mr :Dispatch rails db:rollback<cr>
nnoremap <leader>cc :set clipboard=unnamed<cr>
nnoremap <leader>rx :call ShowComplexity()<cr>
nnoremap <leader>rc :Dispatch rails console<cr>

nnoremap <leader>1b :! jscodeshift -t ~/code/react-codemod/transforms/manual-bind-to-arrow.js %<cr>
nnoremap <leader>1p :! jscodeshift -t ~/code/react-codemod/transforms/pure-component.js % --useArrows=true --destructuring=true<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                    commands!!!                                               "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let @z='gg/PropTypea, Componentjj0/funciwclassf(di(oconst p = this.props;k-jf(c$ extends Component {orender() {/}n/Componentnf{%%kjj%o} i'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                    Plugin Settings!!!                                        "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsSnippetsDir='~/.vim/UltiSnips'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"


let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

let g:ale_linters = { 'javascript': ['eslint'], 'ruby': ['rubocop'] }
let g:ale_fixers = {}
let g:ale_fixers['javascript'] = ['prettier']
let g:ale_fixers['ruby'] = ['rubocop']
let g:ale_javascript_prettier_options = '--single-quote --trailing-comma all'
let g:ale_fix_on_save = 1
let g:vroom_use_dispatch = 1
let g:vroom_map_keys = 0
