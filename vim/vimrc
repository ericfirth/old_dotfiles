""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                              "
"                    Eric Firth's VimRC                                        "
"                                                                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader = "\<Space>"

set nocompatible              " be iMproved, required

packadd minpac
call minpac#init()

"colors
call minpac#add('kien/ctrlp.vim')
call minpac#add('morhetz/gruvbox')
call minpac#add('junegunn/goyo.vim')
call minpac#add('itchyny/lightline.vim')
call minpac#add('ervandew/supertab')
call minpac#add('airblade/vim-gitgutter')
call minpac#add('christoomey/vim-sort-motion')
call minpac#add('christoomey/vim-tmux-navigator')
call minpac#add('tpope/vim-surround')
call minpac#add('tpope/vim-dispatch')
call minpac#add('tpope/vim-unimpaired')
call minpac#add('tpope/vim-repeat')
call minpac#add('tpope/vim-fugitive')
call minpac#add('tpope/vim-sensible')
call minpac#add('tpope/vim-commentary')
call minpac#add('tpope/vim-abolish')
call minpac#add('tpope/vim-endwise')
call minpac#add('tpope/vim-speeddating')
call minpac#add('gko/vim-coloresque')
call minpac#add('SirVer/ultisnips')
call minpac#add('skalnik/vim-vroom')
call minpac#add('w0rp/ale')
call minpac#add('scrooloose/nerdtree')

call minpac#add('junegunn/vim-easy-align')
call minpac#add('ryanoasis/vim-devicons')

" " language based
call minpac#add('sheerun/vim-polyglot')
call minpac#add('tpope/vim-rails')
call minpac#add('pangloss/vim-javascript')
call minpac#add('mxw/vim-jsx')
call minpac#add('MaxMEllon/vim-jsx-pretty')
call minpac#add('samuelsimoes/vim-jsx-utils')
call minpac#add('Galooshi/vim-import-js')
call minpac#add('flowtype/vim-flow')
call minpac#add('aliou/sql-heredoc.vim')
" call minpac#add('ElmCast/elm-vim')
call minpac#add('skammer/vim-ruby-complexity', {'type':'opt'})
call minpac#add('k-takata/minpac', {'type':'opt'})

" minpac commands:
command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                          settings                                            "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

colorscheme gruvbox
set background=dark
set hidden
set cursorline
set path+=**
set wildmenu
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//


" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

" Use Silver Searcher instead of grep
set grepprg=ag
" Make CtrlP use ag for listing the files. Way faster and no useless files.
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_use_caching = 0

" highlight OverLength ctermbg=red ctermfg=white guibg=#592929
" match OverLength /\%81v.\+/

" Numbers
set number

" command to create directories on write
function! s:MkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
    if !isdirectory(dir)
      call mkdir(dir, 'p')
    endif
  endif
endfunction

augroup BWCCreateDir
  autocmd!
  autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

set mouse=a

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2
set shiftround
set expandtab

augroup filetypedetect
  au BufRead,BufNewFile *.jsx setfiletype javascript
augroup END

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

filetype indent on
filetype on
autocmd BufRead,BufNewFile *.json.jb set filetype=ruby

let g:rubycomplexity_enable_at_startup = 0

set noswapfile

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                          mappings                                            "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has('nvim')
  tnoremap <A-[> <Esc>
  tnoremap <a-h> <c-\><c-n><c-w>h
  tnoremap <a-j> <c-\><c-n><c-w>j
  tnoremap <a-k> <c-\><c-n><c-w>k
  tnoremap <a-l> <c-\><c-n><c-w>l
  nnoremap <a-h> <c-w>h
  nnoremap <a-j> <c-w>j
  nnoremap <a-k> <c-w>k
  nnoremap <a-l> <c-w>l
endif

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <leader>tt :! rspec %<cr>
nnoremap <leader>TT :call vroom#RunNearestTest({'runner':'rspec'})<CR>
nnoremap <leader>t :call vroom#RunTestFile({'runner':'rails test'})<CR>
nnoremap <leader>T :call vroom#RunNearestTest({'runner':'rails test'})<CR>
nnoremap <leader>jt1 :! yarn test1 %<cr>


" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

nmap <leader>R :Dispatch chrome-cli reload<cr>
map <leader>i mmgg=G`m
nmap <leader>vr :tabedit ~/.vimrc<cr>
nmap <leader>tm :tabedit ~/.tmux.conf<cr>
nmap <leader>so :source $MYVIMRC<cr>
nmap <leader>gs :Gstatus<cr>
nmap <leader>s :w<cr>
nmap <leader>q :q<cr>
nmap <leader>S :w<cr>:Gwrite<cr>
nmap <leader>gp ci(props<esc>oconst <esc>pA = props;<esc>
noremap <leader>ja :call JSXEncloseReturn()<CR>
nnoremap <leader>ji :call JSXEachAttributeInLine()<CR>
nnoremap <leader>je :call JSXExtractPartialPrompt()<CR>
nnoremap <leader>jc :call JSXChangeTagPrompt()<CR>
nnoremap vat :call JSXSelectTag()<CR>
nmap 0 ^
nmap <cr> o<esc>k
nmap j gj
nmap k gk
map <C-n> :NERDTreeToggle<cr>
map <C-b> :CtrlPBuffer<cr>

nnoremap <F1> :set hlsearch<cr>
nnoremap <F2> :set nohlsearch<cr>
nnoremap <F3> :set paste<cr>
nnoremap <F4> :set nopaste<cr>
nnoremap <f5> :let g:ale_fix_on_save = 0<cr>
nnoremap <f6> :let g:ale_fix_on_save = 1<cr>
nnoremap <leader>fd :FlowJumpToDef<cr>
nnoremap <leader>fw :FlowType<cr>

nnoremap <leader>mc :Dispatch rails g migration 
nnoremap <leader>mm :Dispatch rails db:migrate<cr>
nnoremap <leader>mr :Dispatch rails db:rollback<cr>
nnoremap <leader>cc :set clipboard=unnamed<cr>
nnoremap <leader>rx :call ShowComplexity()<cr>
nnoremap <leader>rc :Dispatch rails console<cr>
nnoremap <leader>fl :Dispatch npm run flow<cr>

nnoremap <leader>1b :! jscodeshift -t ~/code/react-codemod/transforms/manual-bind-to-arrow.js %<cr>
nnoremap <leader>1p :! jscodeshift -t ~/code/react-codemod/transforms/pure-component.js % --useArrows=true --destructuring=true<cr>

nnoremap <leader>jt :! jsctags -o frontend<cr>
nnoremap <leader>pw :! prettier --write --config ./.prettierrc.json %<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                    commands!!!                                               "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let @z='gg/PropTypea, Componentjj0/funciwclassf(di(oconst p = this.props;k-jf(c$ extends Component {orender() {/}n/Componentnf{%%kjj%o} i'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                    Plugin Settings!!!                                        "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsSnippetsDir='~/.vim/UltiSnips'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"

" FZF (replaces Ctrl-P, FuzzyFinder and Command-T)
set rtp+=/usr/local/opt/fzf
set rtp+=~/.fzf

let g:ale_linters = { 'javascript': ['eslint', 'flow'], 'ruby': ['rubocop'] }
let g:ale_fixers = {}
let g:ale_fixers['javascript'] = ['prettier']
let g:ale_javascript_prettier_options = '--config ./.prettierrc.json'
let g:ale_fixers['ruby'] = ['rubocop']
let g:ale_fix_on_save = 1
let g:ale_history_log_output = 1


let g:ale_sign_warning = 'â–²'
let g:ale_sign_error = 'âœ—'
nnoremap <leader>an :ALENextWrap<cr>
nnoremap <leader>ap :ALEPreviousWrap<cr>
" highlight link ALEWarningSign String
" highlight link ALEErrorSign Title

let g:vroom_use_dispatch = 1
let g:vroom_map_keys = 0


" ack -> ag
let g:ackprg = 'ag --vimgrep'

" Lightline
let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ 'active': {
      \   'left': [['mode', 'paste'], ['filename', 'modified']],
      \   'right': [['filetype'], ['lineinfo'], ['percent'], ['readonly', 'linter_warnings', 'linter_errors', 'linter_ok']]
      \ },
      \ 'component_expand': {
      \   'linter_warnings': 'LightlineLinterWarnings',
      \   'linter_errors': 'LightlineLinterErrors',
      \   'linter_ok': 'LightlineLinterOK'
      \ },
      \ 'component_function': {
      \   'filename': 'LightlineFilename'
      \},
      \ 'component_type': {
      \   'readonly': 'error',
      \   'linter_warnings': 'warning',
      \   'linter_errors': 'error'
      \ },
      \ }

function! LightlineFilename()
  let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
  let modified = &modified ? ' +' : ''
  return filename . modified
endfunction

function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d â—†', all_non_errors)
endfunction

function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d âœ—', all_errors)
endfunction

function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? 'âœ“ ' : ''
endfunction

autocmd User ALELint call s:MaybeUpdateLightline()

" Update and show lightline but only if it's visible
" (e.g., not in Goyo)
function! s:MaybeUpdateLightline()
  if exists('#lightline')
    call lightline#update()
  end
endfunction
