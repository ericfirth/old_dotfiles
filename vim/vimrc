"toHaveBeenCalledWith"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                              "
"                    Eric Firth's VimRC                                        "
"                                                                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader = "\<Space>"

set nocompatible              " be iMproved, required

packadd minpac
call minpac#init()

"colors
call minpac#add('morhetz/gruvbox')
call minpac#add('haishanh/night-owl.vim')
call minpac#add('junegunn/goyo.vim')
call minpac#add('junegunn/fzf.vim')
call minpac#add('itchyny/lightline.vim')
call minpac#add('airblade/vim-gitgutter')
call minpac#add('christoomey/vim-sort-motion')
call minpac#add('christoomey/vim-tmux-navigator')
call minpac#add('chrisbra/csv.vim')

call minpac#add('tpope/vim-surround')
call minpac#add('tpope/vim-unimpaired')
call minpac#add('tpope/vim-repeat')
call minpac#add('tpope/vim-fugitive')
call minpac#add('tpope/vim-sensible')
call minpac#add('tpope/vim-commentary')
call minpac#add('tpope/vim-abolish')
call minpac#add('tpope/vim-endwise')
call minpac#add('tpope/vim-speeddating')
call minpac#add('tpope/vim-obsession')

call minpac#add('gko/vim-coloresque')
call minpac#add('SirVer/ultisnips')
call minpac#add('w0rp/ale')
call minpac#add('scrooloose/nerdtree')
call minpac#add('janko/vim-test')
call minpac#add('autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': 'bash install.sh'})
call minpac#add('ryanoasis/vim-devicons')
call minpac#add('ervandew/supertab')
" call minpac#add('lifepillar/vim-mucomplete')
call minpac#add('dhruvasagar/vim-prosession')

" " language based
call minpac#add('tpope/vim-rails')
call minpac#add('aliou/sql-heredoc.vim')
call minpac#add('k-takata/minpac', {'type':'opt'})
call minpac#add('pangloss/vim-javascript')
call minpac#add('peitalin/vim-jsx-typescript')
call minpac#add('leafgarland/typescript-vim')
call minpac#add('MaxMEllon/vim-jsx-pretty')
call minpac#add('jxnblk/vim-mdx-js')

" minpac commands:
command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                          settings                                            "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set termguicolors
syntax enable
colorscheme gruvbox

set hidden
set cursorline
set path+=**
set wildmenu
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//


" Use Silver Searcher instead of grep
set grepprg=rg
" Make CtrlP use ag for listing the files. Way faster and no useless files.
" let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
" let g:ctrlp_use_caching = 0

" highlight OverLength ctermbg=red ctermfg=white guibg=#592929
" match OverLength /\%81v.\+/

" Numbers
set number

" command to create directories on write
function! s:MkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
    if !isdirectory(dir)
      call mkdir(dir, 'p')
    endif
  endif
endfunction

augroup BWCCreateDir
  autocmd!
  autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

set mouse=a

nmap <Leader>b :Buffers<CR>
nmap <Leader>r :Tags<CR>
nmap <Leader>f :Files<CR>
nmap <Leader>a :Ag

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2
set shiftround
set expandtab

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

filetype indent on
filetype on

let g:rubycomplexity_enable_at_startup = 0

set noswapfile
set undofile                        " Record undo history after leaving buffer
set undodir=$HOME/.vim/undodir      " Store undofiles in $HOME/.vim/undodir

highlight Comment cterm=italic

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                          mappings                                            "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has('nvim')
  tnoremap <A-[> <Esc>
  tnoremap <a-h> <c-\><c-n><c-w>h
  tnoremap <a-j> <c-\><c-n><c-w>j
  tnoremap <a-k> <c-\><c-n><c-w>k
  tnoremap <a-l> <c-\><c-n><c-w>l
  nnoremap <a-h> <c-w>h
  nnoremap <a-j> <c-w>j
  nnoremap <a-k> <c-w>k
  nnoremap <a-l> <c-w>l
endif

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <leader>t :TestFile<CR>
nnoremap <leader>T :TestNearest<CR>
nnoremap <Leader>n :ThankYouNext<CR>


map <leader>i mmgg=G`m
nmap <leader>vr :tabedit ~/.vimrc<cr>
nmap <leader>so :source $MYVIMRC<cr>
nmap <leader>gs :Gstatus<cr>
nmap <leader>s :w<cr>
nmap <leader>S :w<cr>:Gwrite<cr>
nmap 0 ^
nmap <cr> o<esc>k
nmap j gj
nmap k gk
nmap <leader>nn :NERDTreeToggle<cr>
nmap <leader>nf :NERDTreeFind<cr>

nnoremap <F1> :set hlsearch<cr>
nnoremap <F2> :set nohlsearch<cr>
nnoremap <F3> :set paste<cr>
nnoremap <F4> :set nopaste<cr>
nnoremap <f5> :let g:ale_fix_on_save = 0<cr>
nnoremap <f6> :let g:ale_fix_on_save = 1<cr>


nnoremap <leader>z zfip
nnoremap <leader>Z zo

nnoremap <leader>cc :set clipboard=unnamed<cr>
nnoremap <leader>rx :call ShowComplexity()<cr>


nnoremap Q @@

" nmap <Leader>b :Buffers<CR>
" nmap <Leader>r :Tags<CR>
" nmap <Leader>f :Files<CR>

nmap <Leader>ak <Plug>(ale_previous_wrap)
nmap <Leader>aj <Plug>(ale_next_wrap)
nmap <Leader>ah :ALEHover<CR>
nmap <Leader>ar :ALEFindReferences<CR>
nmap <Leader>ag :ALEGoToDefinition<CR>

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                    commands!!!                                               "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                    Plugin Settings!!!                                        "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:UltiSnipsSnippetsDir='~/.vim/UltiSnips'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"

let test#strategy = "vimterminal"
if has('nvim')
  let test#strategy = "neovim"
  let g:test#preserve_screen = 1
  tmap <C-o> <C-\><C-n>
endif

let test#javascript#runner = 'jest'
let test#javascript#jest#executable = 'yarn test'

" FZF (replaces Ctrl-P, FuzzyFinder and Command-T)
set rtp+=/usr/local/opt/fzf
set rtp+=/home/linuxbrew/.linuxbrew/bin/fzf
set rtp+=~/.fzf
let $FZF_DEFAULT_COMMAND = 'ag -g ""'

let g:ale_completion_tsserver_autoimport = 1
let g:ale_linters = { 'javascript': ['eslint'], 'ruby': ['rubocop'], 'typescript': ['eslint', 'tsserver'] }
let g:ale_fixers = {}
let g:ale_fixers['javascript'] = ['prettier']
let g:ale_fixers['typescript'] = ['prettier']
let g:ale_fixers['typescript.tsx'] = ['prettier']
let g:ale_fixers['typescriptreact'] = ['prettier']
let g:ale_fixers['ruby'] = ['prettier']
let g:ale_fix_on_save = 1
let g:ale_history_log_output = 1


let g:ale_sign_warning = '▲'
let g:ale_sign_error = '✗'
nnoremap <leader>an :ALENextWrap<cr>
nnoremap <leader>ap :ALEPreviousWrap<cr>
" highlight link ALEWarningSign String
" highlight link ALEErrorSign Title

let g:vroom_use_dispatch = 1
let g:vroom_map_keys = 0


" ack -> ag
let g:ackprg = 'ag --vimgrep'

" Lightline
let g:lightline = {
      \ 'colorscheme': 'nightowl',
      \ 'active': {
      \   'left': [['mode', 'paste'], ['readonly', 'filename', 'modified']],
      \   'right': [['filetype'], ['lineinfo'], ['percent'], ['readonly', 'linter_warnings', 'linter_errors', 'linter_ok']]
      \ },
      \ 'component_expand': {
      \   'linter_warnings': 'LightlineLinterWarnings',
      \   'linter_errors': 'LightlineLinterErrors',
      \   'linter_ok': 'LightlineLinterOK'
      \ },
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \},
      \ 'component_type': {
      \   'readonly': 'error',
      \   'linter_warnings': 'warning',
      \   'linter_errors': 'error'
      \ },
      \ }

function! LightlineFilename()
  let filename = expand('%:t') !=# '' ? expand('%') : '[No Name]'
  let modified = &modified ? ' +' : ''
  return filename . modified
endfunction

function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ◆', all_non_errors)
endfunction

function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction

function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓ ' : ''
endfunction


autocmd User ALELint call s:MaybeUpdateLightline()

" Update and show lightline but only if it's visible
" (e.g., not in Goyo)
function! s:MaybeUpdateLightline()
  if exists('#lightline')
    call lightline#update()
  end
endfunction

let g:ale_history_log_output = 1
let g:prosession_per_branch = 1


" Better display for messages
set cmdheight=2

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300

" always show signcolumns
set signcolumn=yes

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" LanguageClient

let g:LanguageClient_autoStart = 1
let g:LanguageClient_serverCommands = {
    \ 'javascript': ['javascript-typescript-stdio'],
    \ 'typescript': ['typescript-language-server', '--stdio'],
    \ 'typescriptreact': ['typescript-language-server', '--stdio'],
    \ 'typescript.tsx': ['typescript-language-server', '--stdio'],
    \ }

nnoremap <leader>le :call LanguageClient#explainErrorAtPoint()<CR>
nnoremap <leader>lgd :call LanguageClient#textDocument_definition()<CR>
nnoremap <leader>lgi :call LanguageClient#textDocument_implementation()<CR>
nnoremap <leader>lgr :call LanguageClient#textDocument_references()<CR>
nnoremap <leader>lgt :call LanguageClient#textDocument_typeDefinition()<CR>
nnoremap <leader>lr :call LanguageClient#textDocument_rename()<CR>
nnoremap <leader>lt :call LanguageClient#textDocument_hover()<CR>

augroup filetype_ts
  autocmd!
  autocmd BufReadPost *.ts setlocal filetype=typescript
  autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescript.tsx syntax=typescript
augroup END

nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>

function! s:ThankYouNext() abort
  update
  argdelete %
  bdelete
  if !empty(argv())
    argument
  endif
endfunction

command! ThankYouNext call <sid>ThankYouNext()
