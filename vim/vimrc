""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                              "
"                    Eric Firth's VimRC                                        "
"                                                                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader = "\<Space>"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                    Plugins & Vundle                                          "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible              " be iMproved, required
filetype off                  " required
filetype plugin on

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'


"colors
Plugin 'morhetz/gruvbox'

Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'rking/ag.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'christoomey/vim-sort-motion'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-speeddating'
Plugin 'ap/vim-css-color'
Plugin 'SirVer/ultisnips'
Plugin 'skalnik/vim-vroom'
Plugin 'w0rp/ale'
Plugin 'scrooloose/nerdtree'
Plugin 'ludovicchabant/vim-gutentags'

" language based
Plugin 'tpope/vim-rails'
Plugin 'pangloss/vim-javascript'
Plugin 'chemzqm/vim-jsx-improve'
Plugin 'samuelsimoes/vim-jsx-utils'
Plugin 'leshill/vim-json'
Plugin 'aliou/sql-heredoc.vim'

call vundle#end()            " required
filetype plugin indent on    " required



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                          settings                                            "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set background=dark
colorscheme gruvbox
set hidden
set cursorline
set path+=**
set wildmenu
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//


" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

" Use Silver Searcher instead of grep
set grepprg=ag
" Make CtrlP use ag for listing the files. Way faster and no useless files.
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_use_caching = 0

" highlight OverLength ctermbg=red ctermfg=white guibg=#592929
" match OverLength /\%81v.\+/

" Numbers
set number

" command to create directories on write
function! s:MkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
    if !isdirectory(dir)
      call mkdir(dir, 'p')
    endif
  endif
endfunction

augroup BWCCreateDir
  autocmd!
  autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

set mouse=a

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2
set shiftround
set expandtab

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

filetype indent on
filetype on
autocmd BufRead,BufNewFile *.json.jb setfiletype ruby

highlight Comment cterm=italic

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                          mappings                                            "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <F1> :Dispatch mocha --compilers js:babel-core/register test/frontend/setup.js %<CR>
nnoremap <leader>rt :call vroom#RunTestFile({'runner':'rspec'})<CR>
nnoremap <leader>RT :call vroom#RunNearestTest({'runner':'rspec'})<CR>
nnoremap <leader>mt :call vroom#RunTestFile({'runner':'rails test'})<CR>
nnoremap <leader>MT :call vroom#RunNearestTest({'runner':'rails test'})<CR>

map <leader>i mmgg=G`m
map <leader>p :set paste<CR><esc>"*]p:set nopaste<cr>
nmap <leader>vr :tabedit $MYVIMRC<cr>
nmap <leader>tm :tabedit ~/.tmux.conf<cr>
nmap <leader>so :source $MYVIMRC<cr>
nmap <leader>gs :Gstatus<cr>
nmap <leader>s :w<cr>
nmap <leader>q :q<cr>
nmap <leader>S :w<cr>:Gwrite<cr>
nmap <leader>gp ci(props<esc>oconst <esc>pA = props;<esc>
noremap <leader>ja :call JSXEncloseReturn()<CR>
nnoremap <leader>ji :call JSXEachAttributeInLine()<CR>
nnoremap <leader>je :call JSXExtractPartialPrompt()<CR>
nnoremap <leader>jc :call JSXChangeTagPrompt()<CR>
nnoremap vat :call JSXSelectTag()<CR>
nmap 0 ^
nmap <cr> o<esc>k
nmap j gj
nmap k gk
map <C-n> :NERDTreeToggle<cr>
nnoremap <leader>1 :set hlsearch<cr>
nnoremap <leader>2 :set nohlsearch<cr>
nnoremap <leader>mc :Dispatch rails g migration 
nnoremap <leader>mm :Dispatch rails db:migrate<cr>
nnoremap <leader>mr :Dispatch rails db:rollback<cr>



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                    commands!!!                                               "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let @z='gg/PropTypea, Componentjj0/funciwclassf(di(oconst p = this.props;k-jf(c$ extends Component {orender() {/}n/Componentnf{%%kjj%o} i'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                    Plugin Settings!!!                                        "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsSnippetsDir='~/.vim/UltiSnips'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"


let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 0

let g:ale_linters = { 'javascript': ['eslint'], 'ruby': ['rubocop'] }
let g:vroom_use_dispatch = 1
let g:vroom_map_keys = 0
